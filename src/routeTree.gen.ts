/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OuWorkflowIndexRouteImport } from './routes/ou-workflow/index'
import { Route as OuWorkflowApplicationIdIndexRouteImport } from './routes/ou-workflow/$applicationId/index'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OuWorkflowIndexRoute = OuWorkflowIndexRouteImport.update({
  id: '/ou-workflow/',
  path: '/ou-workflow/',
  getParentRoute: () => rootRouteImport,
} as any)
const OuWorkflowApplicationIdIndexRoute =
  OuWorkflowApplicationIdIndexRouteImport.update({
    id: '/ou-workflow/$applicationId/',
    path: '/ou-workflow/$applicationId/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/ou-workflow': typeof OuWorkflowIndexRoute
  '/ou-workflow/$applicationId': typeof OuWorkflowApplicationIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/ou-workflow': typeof OuWorkflowIndexRoute
  '/ou-workflow/$applicationId': typeof OuWorkflowApplicationIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/ou-workflow/': typeof OuWorkflowIndexRoute
  '/ou-workflow/$applicationId/': typeof OuWorkflowApplicationIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/profile'
    | '/ou-workflow'
    | '/ou-workflow/$applicationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/profile'
    | '/ou-workflow'
    | '/ou-workflow/$applicationId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/profile'
    | '/ou-workflow/'
    | '/ou-workflow/$applicationId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  OuWorkflowIndexRoute: typeof OuWorkflowIndexRoute
  OuWorkflowApplicationIdIndexRoute: typeof OuWorkflowApplicationIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ou-workflow/': {
      id: '/ou-workflow/'
      path: '/ou-workflow'
      fullPath: '/ou-workflow'
      preLoaderRoute: typeof OuWorkflowIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ou-workflow/$applicationId/': {
      id: '/ou-workflow/$applicationId/'
      path: '/ou-workflow/$applicationId'
      fullPath: '/ou-workflow/$applicationId'
      preLoaderRoute: typeof OuWorkflowApplicationIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  OuWorkflowIndexRoute: OuWorkflowIndexRoute,
  OuWorkflowApplicationIdIndexRoute: OuWorkflowApplicationIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
